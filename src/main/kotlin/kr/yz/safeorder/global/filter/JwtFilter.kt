package kr.yz.safeorder.global.filterimport jakarta.servlet.FilterChainimport jakarta.servlet.http.HttpServletRequestimport jakarta.servlet.http.HttpServletResponseimport kr.yz.safeorder.global.security.jwt.JwtParserimport org.springframework.http.HttpHeadersimport org.springframework.security.core.context.SecurityContextHolderimport org.springframework.web.filter.OncePerRequestFilterclass JwtFilter(    private val jwtParser: JwtParser) : OncePerRequestFilter() {    companion object {        private const val PREFIX = "Bearer "    }    override fun doFilterInternal(        request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain    ) {        val token = resolvedToken(request.getHeader(HttpHeaders.AUTHORIZATION))        if (token.isNotEmpty()) {            SecurityContextHolder.getContext().authentication = jwtParser.getAuthentication(token)        } else {            SecurityContextHolder.clearContext()        }        filterChain.doFilter(request, response)    }    private fun resolvedToken(bearerToken: String?): String {        bearerToken?.let {            if (bearerToken.startsWith(PREFIX)) {                return bearerToken.removePrefix(PREFIX)            }        }        return ""    }}